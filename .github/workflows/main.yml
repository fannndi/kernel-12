name: Buildjet

on:
  workflow_dispatch:

env:
  TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
  TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
  KERNEL_DEFCONFIG: surya_defconfig
  BUILD_USER: fannndi
  BUILD_HOST: android-build

jobs:
  build:
    name: Build Kernel
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Source
        uses: actions/checkout@v3

      - name: Set Timezone & Vars
        run: |
          BUILD_TIME=$(TZ=Asia/Jakarta date '+%d%m%Y-%H%M')
          BUILD_ID=$(TZ=Asia/Jakarta date '+%Y%m%d%H%M%S')
          echo "BUILD_TIME=$BUILD_TIME" >> $GITHUB_ENV
          echo "BUILD_ID=$BUILD_ID" >> $GITHUB_ENV
          echo "BUILD_START=$(date +%s)" >> $GITHUB_ENV
          echo "ZIP_NAME=MIUI-A12-NOS-${BUILD_TIME}.zip" >> $GITHUB_ENV
          sudo ln -sf /usr/share/zoneinfo/Asia/Jakarta /etc/localtime

      - name: Create Swap
        run: |
          sudo fallocate -l 4G /swapfile
          sudo chmod 600 /swapfile
          sudo mkswap /swapfile
          sudo swapon /swapfile

      - name: Clean Output
        run: rm -rf out

      - name: Install Dependencies
        run: |
          sudo apt update -y
          sudo apt install -y \
            build-essential bc cpio flex bison git python-is-python3 wget curl \
            lz4 libssl-dev libelf-dev libncurses5-dev zstd device-tree-compiler \
            zip pigz rsync jq nano clang llvm lld \
            gcc-aarch64-linux-gnu gcc-arm-linux-gnueabi

      - name: Download Clang (Android 15)
        run: |
          mkdir clang
          wget -q https://android.googlesource.com/platform/prebuilts/clang/host/linux-x86/+archive/refs/heads/main/clang-r536225.tar.gz -O clang.tar.gz
          tar -xf clang.tar.gz -C clang
          rm -f clang.tar.gz
          echo "$GITHUB_WORKSPACE/clang/bin" >> $GITHUB_PATH
          echo "TOOLCHAIN=$GITHUB_WORKSPACE/clang" >> $GITHUB_ENV

      - name: Download mkdtimg (Prebuilt from AOSP)
        run: |
          mkdir -p tools
          wget -q https://android.googlesource.com/platform/system/tools/mkbootimg/+/refs/heads/android-15.0.0_r0.1/prebuilt_linux-x86_64/mkdtimg?format=TEXT -O - | base64 -d > tools/mkdtimg
          chmod +x tools/mkdtimg
          echo "$GITHUB_WORKSPACE/tools" >> $GITHUB_PATH

      - name: Get Clang Version
        id: clang
        run: echo "version=$(clang/bin/clang --version | head -n1)" >> $GITHUB_OUTPUT

      - name: Telegram - Start
        run: |
          curl -s -X POST https://api.telegram.org/bot${{ env.TELEGRAM_BOT_TOKEN }}/sendMessage \
            -d chat_id=${{ env.TELEGRAM_CHAT_ID }} \
            -d text="üöÄ *Build Started!*\nüÜî \`${{ env.BUILD_ID }}\`\nClang: \`${{ steps.clang.outputs.version }}\`" \
            -d parse_mode=Markdown

      - name: Make Defconfig
        run: make O=out ARCH=arm64 ${{ env.KERNEL_DEFCONFIG }}

      - name: Compile Kernel
        run: |
          export KBUILD_COMPILER_STRING="${{ steps.clang.outputs.version }}"
          export CROSS_COMPILE=aarch64-linux-gnu-
          export CROSS_COMPILE_ARM32=arm-linux-gnueabi-
          export CLANG_TRIPLE=aarch64-linux-gnu-

          MEM=$(grep MemTotal /proc/meminfo | awk '{print $2}')
          CORES=$(nproc)
          JOBS=$(( (MEM/1024/1024) < 4 ? 2 : (MEM/1024/1024) < 8 ? 4 : CORES+2 ))

          echo "üß± Compiling with -j$JOBS"

          script -q -c "make -j$JOBS O=out \
            ARCH=arm64 \
            LD=ld.lld AS=llvm-as AR=llvm-ar NM=llvm-nm \
            OBJCOPY=llvm-objcopy OBJDUMP=llvm-objdump STRIP=llvm-strip \
            CROSS_COMPILE=$CROSS_COMPILE \
            CROSS_COMPILE_COMPAT=$CROSS_COMPILE_ARM32 \
            CLANG_TRIPLE=$CLANG_TRIPLE \
            LLVM=1 LLVM_IAS=1 \
            KBUILD_BUILD_USER=${{ env.BUILD_USER }} \
            KBUILD_BUILD_HOST=${{ env.BUILD_HOST }} \
            Image.gz dtbs" log.txt

          test -f out/arch/arm64/boot/Image.gz || { echo "‚ùå Image.gz not found!"; exit 1; }

      - name: Update Defconfig
        if: success()
        run: cp out/.config arch/arm64/configs/${{ env.KERNEL_DEFCONFIG }}

      - name: Create Boot Images
        run: |
          cat out/arch/arm64/boot/Image.gz out/arch/arm64/boot/dts/**/*.dtb > out/arch/arm64/boot/Image.gz-dtb
          cp out/arch/arm64/boot/Image.gz-dtb .

          [ -f out/arch/arm64/boot/dtb.img ] && cp out/arch/arm64/boot/dtb.img . || echo "‚ùó dtb.img not found."

          DTBO_PATH=$(find out/arch/arm64/boot/dts/ -name '*.dtbo' 2>/dev/null | head -n1)
          if [[ -n "$DTBO_PATH" ]]; then
            mkdtimg create dtbo.img --dtbo-path out/arch/arm64/boot/dts/ $(find out/arch/arm64/boot/dts/ -name '*.dtbo')
          else
            echo "‚ùó No .dtbo files found. Skipping dtbo.img creation."
          fi

      - name: Upload Log
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: build-log
          path: log.txt

      - name: Telegram - Log on Fail
        if: failure()
        run: |
          curl -s -X POST https://api.telegram.org/bot${{ env.TELEGRAM_BOT_TOKEN }}/sendDocument \
            -F chat_id=${{ env.TELEGRAM_CHAT_ID }} \
            -F document=@log.txt \
            -F caption="‚ùå *Build Failed*\nüÜî \`${{ env.BUILD_ID }}\`\nClang: \`${{ steps.clang.outputs.version }}\`" \
            -F parse_mode=Markdown

      - name: Package with AnyKernel3
        if: success()
        run: |
          git clone --depth=1 https://github.com/rinnsakaguchi/AnyKernel3 -b FSociety AnyKernel3
          cp Image.gz-dtb AnyKernel3/
          [ -f dtb.img ] && cp dtb.img AnyKernel3/
          [ -f dtbo.img ] && cp dtbo.img AnyKernel3/
          cd AnyKernel3 && zip -r9 ../${{ env.ZIP_NAME }} ./*

      - name: Telegram - Success
        if: success()
        run: |
          DURATION=$(( $(date +%s) - ${{ env.BUILD_START }} ))
          curl -s -X POST https://api.telegram.org/bot${{ env.TELEGRAM_BOT_TOKEN }}/sendMessage \
            -d chat_id=${{ env.TELEGRAM_CHAT_ID }} \
            -d text="‚úÖ *Build Success!*\nüÜî \`${{ env.BUILD_ID }}\`\nClang: \`${{ steps.clang.outputs.version }}\`\nüïí Duration: ${DURATION}s" \
            -d parse_mode=Markdown
          curl -s -F document=@${{ env.ZIP_NAME }} \
            -F caption="‚úÖ Kernel Zip" \
            -F chat_id=${{ env.TELEGRAM_CHAT_ID }} \
            https://api.telegram.org/bot${{ env.TELEGRAM_BOT_TOKEN }}/sendDocument

      - name: Show Build Info
        if: success()
        run: |
          echo "üïí Duration: $(( $(date +%s) - ${{ env.BUILD_START }} ))s"
          du -sh "${{ env.ZIP_NAME }}"
          sha1sum "${{ env.ZIP_NAME }}"

      - name: Disable Swap
        if: always()
        run: sudo swapoff /swapfile